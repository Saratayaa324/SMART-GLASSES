The Main C++ Code

#ifndef GPIO_CLASS_H
#define GPIO_CLASS_H
#include <fstream>
#include <iostream>
#include <sstream>
#include "GPIOClass.h"
#include <string>
using namespace std;
/* GPIO Class
* Purpose: Each object instantiated from this class will control a GPIO pin
* The GPIO pin number must be passed to the overloaded class constructor
*/
class GPIOClass
{
public:
 GPIOClass(); // create a GPIO object that controls GPIO4 (default
 GPIOClass(string x); // create a GPIO object that controls GPIOx, where x is passed to this
constructor
 int export_gpio(); // exports GPIO
 int unexport_gpio(); // unexport GPIO
 int setdir_gpio(string dir); // Set GPIO Direction
 int setval_gpio(string val); // Set GPIO Value (putput pins)
 int getval_gpio(string& val); // Get GPIO Value (input/ output pins)
 string get_gpionum(); // return the GPIO number associated with the instance of an object
private:
 string gpionum; // GPIO number associated with the instance of an object
};
#endif
using namespace std;
GPIOClass::GPIOClass()
{
 this->gpionum = "4"; //GPIO4 is default
}
GPIOClass::GPIOClass(string gnum)
{
 this->gpionum = gnum; //Instatiate GPIOClass object for GPIO pin number "gnum"
}
44
GPIOClass::GPIOClass(string gnum)
{
 this->gpionum = gnum; //Instatiate GPIOClass object for GPIO pin number "gnum"
}
int GPIOClass::export_gpio()
{
 string export_str = "/sys/class/gpio/export";
 ofstream exportgpio(export_str.c_str()); // Open "export" file. Convert C++ string to C string.
Required for all Linux pathnames
 if (exportgpio < 0){
 cout << " OPERATION FAILED: Unable to export GPIO"<< this->gpionum <<" ."<< endl;
 return -1;
 }
 exportgpio << this->gpionum ; //write GPIO number to export
 exportgpio.close(); //close export file
 return 0;
}
int GPIOClass::unexport_gpio()
{
 string unexport_str = "/sys/class/gpio/unexport";
 ofstream unexportgpio(unexport_str.c_str()); //Open unexport file
 if (unexportgpio < 0){
 cout << " OPERATION FAILED: Unable to unexport GPIO"<< this->gpionum <<" ."<<
endl;
 return -1;
 }
 unexportgpio << this->gpionum ; //write GPIO number to unexport
 unexportgpio.close(); //close unexport file
 return 0;
}
int GPIOClass::setdir_gpio(string dir)
{
 string setdir_str ="/sys/class/gpio/gpio" + this->gpionum + "/direction";
 ofstream setdirgpio(setdir_str.c_str()); // open direction file for gpio
 if (setdirgpio < 0){
 cout << " OPERATION FAILED: Unable to set direction of GPIO"<< this->gpionum <<"
."<< endl;
 return -1;
45
 string setdir_str ="/sys/class/gpio/gpio" + this->gpionum + "/direction";
 ofstream setdirgpio(setdir_str.c_str()); // open direction file for gpio
 if (setdirgpio < 0){
 cout << " OPERATION FAILED: Unable to set direction of GPIO"<< this->gpionum <<"
."<< endl;
 return -1;
 }
 setdirgpio << dir; //write direction to direction file
 setdirgpio.close(); // close direction file
 return 0;
}
int GPIOClass::setval_gpio(string val)
{
 string setval_str = "/sys/class/gpio/gpio" + this->gpionum + "/value";
 ofstream setvalgpio(setval_str.c_str()); // open value file for gpio
 if (setvalgpio < 0){
 cout << " OPERATION FAILED: Unable to set the value of GPIO"<< this->gpionum <<"
."<< endl;
 return -1;
 }
 setvalgpio << val ;//write value to value file
 setvalgpio.close();// close value file
 return 0;
}
int GPIOClass::getval_gpio(string& val){
 string getval_str = "/sys/class/gpio/gpio" + this->gpionum + "/value";
 ifstream getvalgpio(getval_str.c_str());// open value file for gpio
 if (getvalgpio < 0){
 cout << " OPERATION FAILED: Unable to get value of GPIO"<< this->gpionum <<" ."<<
endl;
 return -1;
 }
 getvalgpio >> val ; //read gpio value
 if(val != "0")
 val = "1";
 else
46
 getvalgpio >> val ; //read gpio value
 if(val != "0")
 val = "1";
 else
 val = "0";
 getvalgpio.close(); //close the value file
 return 0;
}
string GPIOClass::get_gpionum(){
return this->gpionum;
}
#include <iostream>
#include <unistd.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include "GPIOClass.h"
int main (void)
{
 int flag17=0;
 int i;
 int flagout=0;
 int flag4=0;
 int flagfun=0;
 string inputstate;
 string inputstate2;
 GPIOClass* gpio4 = new GPIOClass("4");
 GPIOClass* gpio17 = new GPIOClass("17");
 gpio4->export_gpio();
 gpio17->export_gpio();
 cout << " GPIO pins exported" << endl;
 gpio17->setdir_gpio("in");
 gpio4->setdir_gpio("in");
47
 cout << " GPIO pins exported" << endl;
 gpio17->setdir_gpio("in");
 gpio4->setdir_gpio("in");
 cout << " Set GPIO pin directions" << endl;
while(1)
{
while(!flagfun)
{
 //while(flag17==0)
 //usleep(500000);
 gpio17->getval_gpio(inputstate);
 gpio4->getval_gpio(inputstate2);
 cout << "Current input pin state is " << inputstate << inputstate2 <<endl;
 if(inputstate == "0" && flag4==0)
 {
 flag17=1;
 }
 if(inputstate2== "0" && flag4==1 )
 {
 flagfun=1;
 }
 else if(inputstate2== "0" && flag4==0 )
 {
 i=system("espeak -v english-us+f4 --stdout -f /home/pi/smartg/textout4.txt -s 140 | aplay
-f cd");
 }
 if(flag17==1) {
 flag4=1;
 cout << "input pin state is ""Pressed"" ." << flag4 <<endl;
 //i=system("espeak -v english-us --stdout -f /home/pi/smartg/textout3.txt -s 140 | aplay -f cd");
 i=system("espeak -v english-us+f4 --stdout -f /home/pi/smartg/textout3.txt -s 140 | aplay -f
cd");
 flag17=0; }
}
system("sudo ./testover_rtt/MW/testover");
i=system("tesseract /home/pi/smartg/ftextimag /home/pi/smartg/textout2");
printf("\n %i",i);
i=system("espeak -v english-us+f4 --stdout -f /home/pi/smartg/textout2.txt -s 140 | aplay -f cd");
//printf("\n %i",i);
48
system("sudo ./testover_rtt/MW/testover");
i=system("tesseract /home/pi/smartg/ftextimag /home/pi/smartg/textout2");
printf("\n %i",i);
i=system("espeak -v english-us+f4 --stdout -f /home/pi/smartg/textout2.txt -s 140 | aplay -f cd");
//printf("\n %i",i);
i=system("tesseract /home/pi/smartg/ftextimag2 /home/pi/smartg/textout2");
printf("\n %i",i);
i=system("espeak -v english-us+f4 --stdout -f /home/pi/smartg/textout2.txt -s 140 | aplay -f cd");
printf("\n %i",i);
i=system("espeak -v english-us+f4 --stdout -f /home/pi/smartg/textout.txt -s 140 | aplay -f cd");
//printf("\n %i",i);
i=system("espeak -v english-us+f4 --stdout -f /home/pi/smartg/textout5.txt -s 140 | aplay -f cd");
while(flagout==0 && flagfun==1)
{
 gpio17->getval_gpio(inputstate);
 gpio4->getval_gpio(inputstate2);
 if (inputstate== "0")
 {
 flagout=1;
 break;
 }
 if (inputstate2== "0")
 {
 flagfun=0;
 break;
 }
}
if (flagout==1) {
i=system("espeak -v english-us+f4 --stdout -f /home/pi/smartg/textout6.txt -s 140 | aplay -f cd");
49
 cout << "unexporting pins" << endl;
 gpio4->unexport_gpio();
 gpio17->unexport_gpio();
 cout << "deallocating GPIO Objects" << endl;
 delete gpio4;
 gpio4 = 0;
 delete gpio17;
 gpio17 =0;
break;}}
 cout << "Exiting....." << endl;
 return 0;
}