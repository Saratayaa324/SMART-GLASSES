1- Image subtraction

function [im2,I5] = redcomponent(R,G,B)
%#codegen
%------------------------- define the image size -------------------------%
im2=uint8(zeros(640,480));
I5=uint8(zeros(640,480));
R1=uint8(zeros(640,480));
G1=uint8(zeros(640,480));
B1=uint8(zeros(640,480));
%-------------------------------------------------------------------------%
%----------- the RGB image, the blue, green and red assignment -----------%
R1=R; G1=G; B1=B;
im=uint8(zeros(640,480,3));
im(:,:,1)=R1;
im(:,:,2)=G1;
im(:,:,3)=B1;
%-------------------------------------------------------------------------%
%------------ image subtraction to find the red component only -----------%
im2=rgb2gray(im);
I1=im(:,:,1)-im2;
I2=im(:,:,2)-im2;
I3=im(:,:,3)-im2;
I4=I1-I2;
I5=I4-I3; % final red only image
%-------------------------------------------------------------------------%
end



2- Border detection code

function [Roi,ptsout,done,im2,F,rotation,tosimout] = last(pts,imag,imlogic)
%#codegen
im=logical(zeros(640,480)); %binary image
im=imlogic;
im2=uint8(zeros(640,480)); %grayscale image
im2=imag;
PTS=int32(zeros(30,4)); %hough transform end and start points output
done=0;
PTS=pts;
inter=int32(zeros(1,1));
yinter=int32(zeros(1,1));
%------------ define the intersection points of interest arrays-----------%
m1ymin=int32(zeros(1,30));m1xmin=int32(zeros(1,30));m2ymax=int32(zeros(1,30));m2xmin=int3
2(zeros(1,30));
m3ymin=int32(zeros(1,30));
m3xmax=int32(zeros(1,30));m4xmax=int32(zeros(1,30));m4ymax=int32(zeros(1,30));
%-------------------------------------------------------------------------%
f1=0;f2=0;f3=0;f4=0; % four lines flags
F=double(zeros(1,4));
for i=1:30

%------------- set the four lines flags----------------------------------%
 if(PTS(i,1)==1 || PTS(i,3)==1)
 if(PTS(i,1)==480 || PTS(i,3)==480)
 if(PTS(i,2)<(640/2) || PTS(i,4)<(640/2))
 f1=1;
 else
 f3=1;
 end
 end
 elseif(PTS(i,2)==1 || PTS(i,4)==1)
 if(PTS(i,2)==640 || PTS(i,4)==640)
 if(PTS(i,1)<(480/2) || PTS(i,3)<(480/2))
 f2=1;
 else
 f4=1;
 end
 end
 end
%-------------------------------------------------------------------------%
%----------------------- find intersections ----------------------------- %
 m1=double((PTS(i,2)-PTS(i,4))/(PTS(i,1)-PTS(i,3)));
 a1=PTS(i,2)-(m1*PTS(i,1));
 for j=i+1:30
 m2=double((PTS(j,2)-PTS(j,4))/(PTS(j,1)-PTS(j,3)));
 a2=PTS(j,2)-(m2*PTS(j,1));
 interd=(a2-a1)/(m1-m2);
 yinterd=m2*inter+a2;

40
%----------------------- find intersections ----------------------------- %
 m1=double((PTS(i,2)-PTS(i,4))/(PTS(i,1)-PTS(i,3)));
 a1=PTS(i,2)-(m1*PTS(i,1));

 for j=i+1:30
 m2=double((PTS(j,2)-PTS(j,4))/(PTS(j,1)-PTS(j,3)));
 a2=PTS(j,2)-(m2*PTS(j,1));
 interd=(a2-a1)/(m1-m2);
 yinterd=m2*inter+a2;
 inter=(a2-a1)/(m1-m2);
 yinter=m2*inter+a2;
 if (inter>0 && yinter>0 && m1~=m2)
 if(yinter>0 && inter>0 && yinter<(641/2) && inter<(481/2))
 if (m1ymin(1)==0 || (yinter<m1ymin(1)&& im(yinter,inter)==1) )
 m1ymin=[yinter,m1ymin(1:29)];
 m1xmin=[m1xmin(1),inter,m1xmin(2:29)];
 end

 if (m1xmin(1)==0 || (inter<m1xmin(1) && im(yinter,inter)==1))
 m1xmin=[inter,m1xmin(1:29)];
 m1ymin=[m1ymin(1),yinter,m1ymin(2:29)];
 end

 elseif(yinter>((641/2)+1) && inter>0 && yinter<641 && inter<(481/2))
 if (yinter>m2ymax(1) && im(yinter,inter)==1 )
 m2ymax=[yinter,m2ymax(1:29)];
 m2xmin=[m2xmin(1),inter,m2xmin(2:29)];
 end
 if (m2xmin(1)==0 || (inter<m2xmin(1) && im(yinter,inter)==1))
 m2xmin=[inter,m2xmin(1:29)];
 m2ymax=[m2ymax(1),yinter,m2ymax(2:29)];
 end
 elseif (yinter>0 && inter>((481/2)+1) && yinter<(641/2) && inter<481)
 if (m3ymin(1)==0 || (yinter<m3ymin(1) && im(yinter,inter)==1) )
 m3ymin=[yinter,m3ymin(1:29)];
 m3xmax=[m3xmax(1),inter,m3xmax(2:29)];
 end
 if ( inter> m3xmax(1)&& im(yinter,inter)==1)
 m3xmax=[inter,m3xmax(1:29)];
 m3ymin=[m3ymin(1),yinter,m3ymin(2:29)];
 end

 elseif (yinter>((641/2)+1) && inter>((481/2)+1) && yinter<641 && inter<481)
 if (yinter>m4ymax(1) && im(yinter,inter)==1 )
 m4ymax=[yinter,m4ymax(1:29)];
 m4xmax=[m4xmax(1),inter,m4xmax(2:29)];
 end
41
 if ( inter>m4xmax(1)&& im(yinter,inter)==1)
 m4xmax=[inter,m4xmax(1:29)];
 m4ymax=[m4ymax(1),yinter,m4ymax(2:29)];
 end

 end
 end
 end

end
%-------------------------------------------------------------------------%
F=[f1 f2 f3 f4];
X=int32(zeros(1,8));
flag=double(zeros(1,4));
%---- define and find the four intersection points and their flags -------%
m1x=int32(1);m1y=int32(1);m2x=int32(1);
m2y=int32(657);m3x=int32(1246);m3y=int32(1);m4x=int32(1246);m4y=int32(657);
flag1=0;flag2=0;flag3=0;flag4=0;
for j=1:30
 if((flag1*flag2*flag3*flag4)==1)
 break;
 else
 for i=1:30
 if((flag1*flag2*flag3*flag4)==1)
 break;
 else
 if(m1ymin(j)*m1xmin(i)>0 && im(m1ymin(j),m1xmin(i))==1 && flag1==0)
 m1y=m1ymin(j); m1x=m1xmin(i);
 flag1=1;
 end
 if(m2ymax(j)*m2xmin(i)>0 && im(m2ymax(j),m2xmin(i))==1 && flag2==0)
 m2y=m2ymax(j); m2x=m2xmin(i);
 flag2=1;
 end
 if(m3ymin(j)*m3xmax(i)>0 && im(m3ymin(j),m3xmax(i))==1 && flag3==0)
 m3y=m3ymin(j); m3x=m3xmax(i);
 flag3=1;
 end
 if(m4ymax(j)*m4xmax(i)>0 && im(m4ymax(j),m4xmax(i))==1 && flag4==0)
 m4y=m4ymax(j); m4x=m4xmax(i);
 flag4=1;
 end
 end
 end
 end
end
%-------------------------------------------------------------------------%
42
X=[m1x,m1y,m2x,m2y,m3x,m3y,m4x,m4y];
flag=[flag1,flag2,flag3,flag4];
%----------------- find the angle of rotation ----------------------------%
distance=sqrt(double(((m2x-m1x)^2 + (m2y-m1y)^2)));
 midpointx=(double(m2x+m1x))/2;
 ang1=atand(((midpointx-1)/(distance/2)));
 if (ang1>10)
 rotation=((ang1-45)/180);
 else
 rotation=0;
 end
 tosimout=[distance,midpointx,ang1,rotation];
%-------------------------------------------------------------------------%
%---------- find the length of vertical and horizantal lines -------------%
y1m=abs(m2y-m1y);
y2m=abs(m4y-m3y);
x1m=abs(m3x-m1x);
x2m=abs(m4x-m2x);
VertY=[y1m,y2m];
HoriX=[x1m,x2m];
Vmax=round(max(VertY));
Hmax=round(max(HoriX));
%-------------------------------------------------------------------------%
%------------------- find the minimum y and x ----------------------------%
ymin=round(min([m1y,m3y]));
xmin=round(min([m1x,m2x]));
newy=[ymin (Vmax-ymin)];
newx=[xmin (Hmax-xmin)];
%-------------------------------------------------------------------------%
matla
%--------- define and assign the traingle for the border cropping --------%
Roi=int32(zeros(1,4));
Roi=[int32(xmin) int32(ymin) int32(Hmax) int32(Vmax)];
ptsout=[m1x m1y; m2x m2y;m3x m3y;m4x m4y];
%-------------------------------------------------------------------------%
done=1; % indication for the end of this function
end


